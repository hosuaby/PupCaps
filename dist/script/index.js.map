{"version":3,"file":"index.js","sources":["../../node_modules/@commander-js/extra-typings/index.js","../../node_modules/@commander-js/extra-typings/esm.mjs","../../src/script/assets.ts","../../src/script/cli.ts","../../src/script/srt-captions-reader.ts","../../src/script/work-dir.ts","../../src/script/recorder.ts","../../src/script/renderer.ts","../../src/script/index.ts"],"sourcesContent":["const commander = require('commander');\n\nexports = module.exports = {};\n\n// Return a different global program than commander,\n// and don't also return it as default export.\nexports.program = new commander.Command();\n\n/**\n * Expose classes. The FooT versions are just types, so return Commander original implementations!\n */\n\nexports.Argument = commander.Argument;\nexports.Command = commander.Command;\nexports.CommanderError = commander.CommanderError;\nexports.Help = commander.Help;\nexports.InvalidArgumentError = commander.InvalidArgumentError;\nexports.InvalidOptionArgumentError = commander.InvalidArgumentError; // Deprecated\nexports.Option = commander.Option;\n\n// In Commander, the create routines end up being aliases for the matching\n// methods on the global program due to the (deprecated) legacy default export.\n// Here we roll our own, the way Commander might in future.\nexports.createCommand = (name) => new commander.Command(name);\nexports.createOption = (flags, description) =>\n  new commander.Option(flags, description);\nexports.createArgument = (name, description) =>\n  new commander.Argument(name, description);\n","import extraTypingsCommander from './index.js';\n\n// wrapper to provide named exports for ESM.\nexport const {\n  program,\n  createCommand,\n  createArgument,\n  createOption,\n  CommanderError,\n  InvalidArgumentError,\n  InvalidOptionArgumentError, // deprecated old name\n  Command,\n  Argument,\n  Option,\n  Help,\n} = extraTypingsCommander;\n","import * as path from 'path';\n\nexport const assetsFolder = path.join(__dirname, '..', '..', 'assets');\nexport const defaultStylesCss = path.join(assetsFolder, 'captions.css');\nexport const indexHtml = path.join(assetsFolder, 'index.html');\n\nexport const indexJs = path.join(__dirname, '..', 'web', 'index.js');\n","import {Command} from '@commander-js/extra-typings';\nimport packageJson from '../../package.json';\nimport {defaultStylesCss} from './assets';\nimport * as cliProgress from 'cli-progress';\n\nexport interface Args {\n    srtInputFile: string;\n    gifOutputFile: string;\n    videoWidth: number;\n    videoHeight: number;\n    styleFile: string;\n    renderingQuality: number;\n}\n\nfunction parseIntAndAssert(...assertions: ((v: number) => void)[]): (v: string) => number {\n    return (value: string) => {\n        const int = parseInt(value, 10);\n        assertions.forEach(assertion => assertion(int));\n        return int;\n    }\n}\n\nfunction assertPositive(option: string): (v: number) => void {\n    return (value: number) => {\n        if (value < 0) {\n            throw new Error(`${option} should be positive!`);\n        }\n    };\n}\n\nfunction assertMinMax(option: string, min: number, max: number): (v: number) => void {\n    return (value: number) => {\n        if (value < min || value > max) {\n            throw new Error(`${option} must be a number between ${min} and ${max}.`);\n        }\n    };\n}\n\nfunction assertFileExtension(ext: string): (v: string) => void {\n    return (value: string) => {\n        if (!value.endsWith(ext)) {\n            throw new Error(`File should have extension ${ext}!`);\n        }\n        return value;\n    };\n}\n\nconst program = new Command();\n\nprogram\n    .name('PupCaps!')\n    .description('Tool to add stylish captions to your video.')\n    .version(packageJson.version)\n    .argument('<file>', 'Path to the input SubRip Subtitle (.srt) file.', assertFileExtension('.srt'))\n    .option('-o, --output <file>',\n        `Full or relative path where the created animated GIF file should be written.\n        By default, it will be saved in the same directory as the input subtitle file.`)\n    .option('-w, --width <number>',\n        'Width of the video in pixels (default: 1080).',\n        parseIntAndAssert(assertPositive('Width')),\n        1080)\n    .option('-h, --height <number>',\n        'Height of the video in pixels (default: 1920).',\n        parseIntAndAssert(assertPositive('Height')),\n        1920)\n    .option('-s, --style <file>',\n        `Full or relative path to the styles .css file.\n        If not provided, default styles for captions will be used.`,\n        assertFileExtension('.css'))\n    .option('-q, --quality <number>',\n        'Quality of rendering. A number between 1 and 20 (default: 10). Lower numbers indicate better quality.',\n        parseIntAndAssert(assertPositive('Quality'), assertMinMax('Quality', 1, 20)),\n        10)\n    .action((inputFile, options: any) => {\n        if (!options.output) {\n            const fileBasename = (inputFile as any as string).slice(0, -4);\n            options.output = `${fileBasename}.gif`;\n        }\n\n        if (!options.style) {\n            options.style = defaultStylesCss;\n        }\n    });\n\nexport function parseArgs(): Args {\n    program.parse();\n    const opts = program.opts() as any;\n\n    return {\n        srtInputFile: program.args[0],\n        gifOutputFile: opts.output,\n        videoWidth: opts.width,\n        videoHeight: opts.height,\n        styleFile: opts.style,\n        renderingQuality: opts.quality,\n    };\n}\n\nexport function printArgs(args: Args) {\n    const styles = args.styleFile === defaultStylesCss\n        ? '(Default)'\n        : args.styleFile;\n\n    const srt = `\n    Output:     ${args.gifOutputFile}\n    Width:      ${args.videoWidth} px\n    Height:     ${args.videoHeight} px\n    Styles:     ${styles}\n    Quality:    ${args.renderingQuality} (of 20; lower is better)\n    `;\n\n    console.log(srt);\n}\n\nexport function createProgressBar(): cliProgress.SingleBar {\n    return new cliProgress.SingleBar({\n        format: 'Progress |{bar}| {percentage}% || {value}/{total} Captions',\n        barCompleteChar: '\\u2588',\n        barIncompleteChar: '\\u2591',\n        hideCursor: true,\n    }, cliProgress.Presets.shades_classic);\n}","import {readFileSync} from 'fs';\nimport {Caption, Word} from '../common/caption';\n\nconst indexLinePattern = /^\\d+$/;\nconst timecodesLinePattern = /^(\\d{2}:\\d{2}:\\d{2}.\\d{3}) --> (\\d{2}:\\d{2}:\\d{2}.\\d{3})$/;\nconst highlightedWordPattern = /^\\[(.+)]$/;\n\nexport function parseCaptions(srtCaptionsFile: string): Caption[] {\n    const captionsSrc = readFileSync(srtCaptionsFile, 'utf-8');\n    return readCaptions(captionsSrc);\n}\n\nfunction readCaptions(srtContent: string): Caption[] {\n    const lines = srtContent.split('\\n');\n    const captions: Caption[] = [];\n\n    let index: number = 0;\n    let timecodesStart: string | null = null;\n    let timecodesEnd: string | null = null;\n\n    for (const line of lines) {\n        let match;\n        if ((match = line.match(indexLinePattern))) {\n            index = Number(line);\n        } else if ((match = line.match(timecodesLinePattern))) {\n            timecodesStart = match[1];\n            timecodesEnd = match[2];\n        } else if (line.length) {\n            const start = toMillis(timecodesStart!);\n            const end = toMillis(timecodesEnd!);\n\n            const words = readWords(line);\n\n            captions.push({\n                index,\n                words,\n                startTimeMs: start,\n                endTimeMs: end,\n            });\n        }\n    }\n\n    return captions;\n}\n\nfunction readWords(text: string): Word[] {\n    const words = text.split(/\\s+/);\n    return words\n        .map(word => {\n            const match = word.match(highlightedWordPattern);\n            return {\n                rawWord: match ? match[1] : word,\n                isHighlighted: !!match,\n            }\n        });\n}\n\nfunction toMillis(timecodes: string): number {\n    const parts = timecodes.split(/[:.]/).map(Number);\n\n    const hours = parts[0];\n    const minutes = parts[1];\n    const seconds = parts[2];\n    const milliseconds = parts[3];\n\n    return hours * 3_600_000    // hours to millis\n        + minutes * 60_000      // minutes to millis\n        + seconds * 1000        // second to millis\n        + milliseconds;\n}","import * as tmp from 'tmp';\nimport * as path from 'path';\nimport {writeFileSync, symlinkSync, rmSync} from 'fs';\nimport {Caption} from '../common/caption';\nimport {Args} from './cli';\nimport {indexHtml, indexJs} from './assets';\n\nexport class WorkDir {\n    private readonly workDir = tmp.dirSync({ template: 'pupcaps-XXXXXX' });\n\n    constructor(private readonly captions: Caption[],\n                private readonly args: Args) {\n    }\n\n    public setup(): string {\n        const index = path.join(this.workDir.name, 'index.html');\n\n        symlinkSync(indexHtml, index);\n        symlinkSync(indexJs, path.join(this.workDir.name, 'index.js'));\n        symlinkSync(this.args.styleFile, path.join(this.workDir.name, 'captions.css'));\n\n        this.setupCaptions();\n        this.setupVideoSizeCss();\n\n        return index;\n    }\n\n    public clear() {\n        rmSync(this.workDir.name, { recursive: true, force: true });\n    }\n\n    private setupVideoSizeCss() {\n        const css= `#video {\n            width: ${this.args.videoWidth}px;\n            height: ${this.args.videoHeight}px;\n        }`;\n        const videoSizeFile = path.join(this.workDir.name, 'video.size.css');\n\n        writeFileSync(videoSizeFile, css);\n    }\n\n    private setupCaptions() {\n        const captionsJs = 'window.captions = ' + JSON.stringify(this.captions, null, 2);\n        const captionsJsFile = path.join(this.workDir.name, 'captions.js');\n\n        writeFileSync(captionsJsFile, captionsJs);\n    }\n}","import * as puppeteer from 'puppeteer';\nimport * as cliProgress from 'cli-progress';\nimport {PNG} from 'pngjs';\nimport {Caption} from '../common/caption';\nimport {Renderer} from './renderer';\n\nexport class Recorder {\n    private browser: puppeteer.Browser | null = null;\n    private page: puppeteer.Page | null = null;\n\n    constructor(private readonly captions: Caption[],\n                private readonly renderer: Renderer,\n                private readonly progressBar: cliProgress.SingleBar) {\n    }\n\n    public async recordCaptionsVideo(indexHtml: string) {\n        this.progressBar.start(this.captions.length, 0);\n\n        try {\n            const videoElem = await this.launchBrowser(indexHtml);\n\n            this.renderer.startEncoding();\n\n            // Add empty frame before captions starts\n            const beginningTime = this.captions[0].startTimeMs;\n            this.renderer.addEmptyFrame(beginningTime);\n\n            for (let i = 0; i < this.captions.length; i++) {\n                const caption = this.captions[i];\n\n                await this.nextStep();\n\n                const screenShot = await this.takeScreenShot(videoElem!);\n                const frameDuration = caption.endTimeMs - caption.startTimeMs;\n                this.renderer.addFrame(screenShot, frameDuration);\n\n                // Add delay before the next frame\n                if (i < this.captions.length - 1) {\n                    const idleDelay = this.captions[i + 1].startTimeMs - caption.endTimeMs;\n                    if (idleDelay) {\n                        this.renderer.addEmptyFrame(idleDelay);\n                    }\n                }\n\n                this.progressBar.increment();\n            }\n\n            // Finish with en empty frame\n            this.renderer.addEmptyFrame();\n\n            this.renderer.finishEncoding();\n        } catch (error) {\n            console.error('Error during Puppeteer operation:', error);\n        } finally {\n            this.progressBar.stop();\n            await this.browser?.close();\n        }\n    }\n\n    private async launchBrowser(indexHtml: string): Promise<puppeteer.ElementHandle | null> {\n        this.browser = await puppeteer.launch({\n            args: [\n                '--disable-web-security',           // Disable CORS\n                '--allow-file-access-from-files',   // Allow file access\n            ],\n            headless: true,\n        });\n        this.page = await this.browser.newPage();\n        await this.page.goto(`file://${indexHtml}`);\n        await this.page.evaluate(() => {\n            return window.ready;\n        });\n\n        return this.page.$('#video');\n    }\n\n    private async nextStep() {\n        await this.page!.evaluate(() => {\n            window.Player.next();\n        });\n    }\n\n    private async takeScreenShot(elem: puppeteer.ElementHandle): Promise<Buffer<ArrayBufferLike>> {\n        const screenshotBuffer = await elem.screenshot({\n            encoding: 'binary',\n            omitBackground: true,\n        });\n        const png = PNG.sync.read(Buffer.from(screenshotBuffer));\n        return png.data;\n    }\n}","import {Args} from './cli';\nimport GIFEncoder from 'gif-encoder';\nimport {createWriteStream} from 'fs';\n\nexport class Renderer {\n    private readonly encoder: GIFEncoder;\n\n    constructor(private readonly args : Args) {\n        this.encoder = new GIFEncoder(args.videoWidth, args.videoHeight);\n\n        this.encoder.setRepeat(-1);                             // 0 = loop forever, -1 = no repeat\n        this.encoder.setQuality(this.args.renderingQuality);    // Quality: lower is better, 10 is default\n        this.encoder.setDispose(2);\n        this.encoder.setTransparent(0x0000000);\n        this.encoder.writeHeader();\n    }\n\n    public startEncoding() {\n        const stream = createWriteStream(this.args.gifOutputFile);\n        this.encoder.pipe(stream);\n    }\n\n    public addEmptyFrame(durationMs?: number) {\n        this.addFrame([], durationMs);\n    }\n\n    public addFrame(buffer: Buffer<ArrayBufferLike> | never[], durationMs?: number) {\n        if (durationMs) {\n            this.encoder.setDelay(durationMs);\n        }\n\n        this.encoder.addFrame(buffer);\n    }\n\n    public finishEncoding() {\n        this.encoder.finish();\n    }\n}","import {createProgressBar, parseArgs, printArgs} from './cli';\nimport {parseCaptions} from './srt-captions-reader';\nimport {WorkDir} from './work-dir';\nimport {Recorder} from './recorder';\nimport {Renderer} from './renderer';\n\nconst cliArgs = parseArgs();\nconst captions = parseCaptions(cliArgs.srtInputFile);\nconst progressBar = createProgressBar();\n\nconst workDir = new WorkDir(captions, cliArgs);\nconst renderer = new Renderer(cliArgs);\nconst recorder = new Recorder(captions, renderer, progressBar);\n\n(async () => {\n    try {\n        const indexHtml = workDir.setup();\n        printArgs(cliArgs);\n        await recorder.recordCaptionsVideo(indexHtml);\n        console.log('Done!');\n    } catch (err) {\n        console.error('Error occurred:', err);\n    } finally {\n        workDir.clear();\n    }\n})();"],"names":["program","path","cliProgress","readFileSync","tmp","symlinkSync","rmSync","writeFileSync","puppeteer","PNG","createWriteStream"],"mappings":"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","x_google_ignoreList":[0,1]}