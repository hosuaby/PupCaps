{"version":3,"file":"index.js","sources":["../../src/web/renderer.ts","../../src/web/player.ts","../../src/web/index.ts"],"sourcesContent":["import {Caption, Word} from '../common/caption';\n\nfunction renderWord(word: Word): HTMLSpanElement {\n    const wordSpan = document.createElement('span');\n    wordSpan.textContent = word.rawWord;\n\n    let cssClass = 'word'\n    if (word.isHighlighted) {\n        cssClass += ' highlighted';\n    }\n\n    wordSpan.setAttribute('class', cssClass);\n\n    return wordSpan;\n}\n\nexport function renderCaption(caption: Caption): HTMLDivElement {\n    const captionDiv = document.createElement('div');\n    captionDiv.setAttribute('id', `caption_${caption.index}`);\n    captionDiv.setAttribute('class', 'caption');\n\n    caption.words\n        .map(renderWord)\n        .forEach(spanElem => captionDiv.appendChild(spanElem));\n\n    return captionDiv;\n}","import {Caption} from '../common/caption';\nimport {renderCaption} from './renderer';\n\nexport class Player {\n    private index = 0;\n    private readonly captionsContainer: Element;\n    private readonly rendered: HTMLDivElement[] = [];\n\n    constructor(private readonly videoElem: HTMLElement,\n                private readonly captions: Caption[]) {\n        this.captionsContainer = this.videoElem.querySelector('.captions')!;\n\n        for (const caption of captions) {\n            this.rendered[caption.index] = renderCaption(caption);\n        }\n    }\n\n    next() {\n        if (!this.isEnd) {\n            if (this.index) {\n                const oldCaptionElem = this.rendered[this.index];\n                oldCaptionElem.remove();\n            }\n\n            this.index++;\n            const newCaptionElem = this.rendered[this.index]\n            this.captionsContainer.appendChild(newCaptionElem);\n        }\n    }\n\n    get isEnd(): boolean {\n        return this.index === this.captions.length\n    }\n}","import {Player} from './player';\n\nwindow.ready = new Promise((resolve, reject) => {\n    window.onload = () => {\n        const videoElem = document.getElementById('video');\n        window.Player = new Player(videoElem!, window.captions);\n        resolve();\n    };\n});"],"names":[],"mappings":";;;IAEA,SAAS,UAAU,CAAC,IAAU,EAAA;QAC1B,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC;IAC/C,IAAA,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO;QAEnC,IAAI,QAAQ,GAAG,MAAM;IACrB,IAAA,IAAI,IAAI,CAAC,aAAa,EAAE;YACpB,QAAQ,IAAI,cAAc;;IAG9B,IAAA,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC;IAExC,IAAA,OAAO,QAAQ;IACnB;IAEM,SAAU,aAAa,CAAC,OAAgB,EAAA;QAC1C,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC;QAChD,UAAU,CAAC,YAAY,CAAC,IAAI,EAAE,CAAW,QAAA,EAAA,OAAO,CAAC,KAAK,CAAE,CAAA,CAAC;IACzD,IAAA,UAAU,CAAC,YAAY,CAAC,OAAO,EAAE,SAAS,CAAC;IAE3C,IAAA,OAAO,CAAC;aACH,GAAG,CAAC,UAAU;IACd,SAAA,OAAO,CAAC,QAAQ,IAAI,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAE1D,IAAA,OAAO,UAAU;IACrB;;UCvBa,MAAM,CAAA;IAKc,IAAA,SAAA;IACA,IAAA,QAAA;QALrB,KAAK,GAAG,CAAC;IACA,IAAA,iBAAiB;QACjB,QAAQ,GAAqB,EAAE;QAEhD,WAA6B,CAAA,SAAsB,EACtB,QAAmB,EAAA;YADnB,IAAS,CAAA,SAAA,GAAT,SAAS;YACT,IAAQ,CAAA,QAAA,GAAR,QAAQ;YACjC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAE;IAEnE,QAAA,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;IAC5B,YAAA,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,aAAa,CAAC,OAAO,CAAC;;;QAI7D,IAAI,GAAA;IACA,QAAA,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;IACb,YAAA,IAAI,IAAI,CAAC,KAAK,EAAE;oBACZ,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;oBAChD,cAAc,CAAC,MAAM,EAAE;;gBAG3B,IAAI,CAAC,KAAK,EAAE;gBACZ,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;IAChD,YAAA,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,cAAc,CAAC;;;IAI1D,IAAA,IAAI,KAAK,GAAA;YACL,OAAO,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM;;IAEjD;;IC/BD,MAAM,CAAC,KAAK,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;IAC3C,IAAA,MAAM,CAAC,MAAM,GAAG,MAAK;YACjB,MAAM,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC;IAClD,QAAA,MAAM,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,SAAU,EAAE,MAAM,CAAC,QAAQ,CAAC;IACvD,QAAA,OAAO,EAAE;IACb,KAAC;IACL,CAAC,CAAC;;;;;;"}